if 'data_exporter' not in globals():
    from mage_ai.data_preparation.decorators import data_exporter

import sqlite3
import pandas as pd

@data_exporter
def export_data(df, *args, **kwargs):
    if df.empty:
        print("No new data to export. The DataFrame is empty.")
        return

    # Get the new database path
    db_path = 'new_database.db'

    # Connect to the SQLite database
    conn = sqlite3.connect(db_path)

    # Create the table if it doesn't exist
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS pos_table (
        transaction_id TEXT PRIMARY KEY,
        product_id TEXT,
        customer_id TEXT,
        store_id TEXT,
        quantity INTEGER,
        price REAL,
        transaction_date TEXT
    )
    """)
    conn.commit()

    print("Existing transactions in the database before insertion:")
    existing_transactions = pd.read_sql_query("SELECT transaction_id FROM pos_table", conn)
    print(existing_transactions)

    # Find duplicates within the new data
    duplicate_transaction_ids = df['transaction_id'].isin(existing_transactions['transaction_id'])
    
    # Log duplicate information if found
    if duplicate_transaction_ids.any():
        print("Duplicate transactions found in new data:")
        print(df[duplicate_transaction_ids])
    
    # Remove duplicates from the new data
    df_to_insert = df[~duplicate_transaction_ids]
    
    # Write the dataframe to the database
    if not df_to_insert.empty:
        df_to_insert.to_sql('pos_table', conn, if_exists='append', index=False)
    else:
        print("No new data to insert after removing duplicates.")

    print("Existing transactions in the database after insertion:")
    updated_transactions = pd.read_sql_query("SELECT transaction_id FROM pos_table", conn)
    print(updated_transactions)

    # Close the connection
    conn.close()

    print(f"Data exported to SQLite database: {db_path}")

    # Call test function with the original df to validate transformation
    test_output(df)

@test
def test_output(df) -> None:
    db_path = 'new_database.db'
    
    # Connect to the SQLite database
    conn = sqlite3.connect(db_path)
    
    # Check if the table exists
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='pos_table';")
    table_exists = cursor.fetchone()
    
    if table_exists:
        # Read the existing transaction IDs from the database
        existing_transactions = pd.read_sql_query("SELECT transaction_id FROM pos_table", conn)
        
        # Log the existing transaction IDs for debugging
        print("Existing transactions in the database during test:")
        print(existing_transactions)
        
        # Find duplicates within the new data
        duplicate_transaction_ids = df['transaction_id'].isin(existing_transactions['transaction_id'])
        
        # Check if any duplicates were found
        duplicates_exist = duplicate_transaction_ids.any()
    else:
        duplicates_exist = False
    
    # Close the connection
    conn.close()
    
    # Assert that the data does not have duplicates in the database
    assert not duplicates_exist, 'Duplicate transactions found in the database'
    
    # Assert that the dataframe is not empty
    assert df is not None, 'The output is undefined'
    assert len(df) > 0, 'The output is empty'
